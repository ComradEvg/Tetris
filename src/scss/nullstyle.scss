* {
   padding: 0;
   margin: 0;
   border: 0;
}
*,
*:before,
*:after {
   -moz-box-sizing: border-box;
   -webkit-box-sizing: border-box;
   box-sizing: border-box;
}
/* меняет подсчёт ширины блока */

:focus,
:active {
   outline: none;
}
a:focus,
:active {
   outline: none;
}
/* убирает линии обводки у браузеров */

nav,
footer,
header,
aside {
   display: block;
}
/* делает строчные теги блочными */

html,
body {
   width: 100%;
   height: 100%;
   margin: 0;
   padding: 0;
   position: relative;
   max-height: 100%;
   overflow-x: hidden;
   scroll-behavior: smooth;
}
body {
   font-size: 100%;
   line-height: 1;
   font-size: 14px;
   -ms-text-size-adjust: 100%;
   -moz-text-size-adjust: 100%;
   -webkit-text-size-adjust: 100%;
}
/* уравнивает поведение шрифтов и элементов для разных браузеров (в том числе запрет самовольного увеличения шрифтов на айфонах) */

input,
button,
textarea {
   font-family: inherit;
}
/* наследование заданных шрифтов данными элементами */

input::-ms-clear {
   display: none;
}
button {
   cursor: pointer;
   font-size: inherit;
}
button::-moz-focus-inner {
   padding: 0;
   border: 0;
}
a,
a:visited {
   text-decoration: none;
}
a:hover {
   text-decoration: none;
}
ul,
li {
   list-style: none;
}
img {
   vertical-align: top;
}
a {
   display: block;
   color: inherit;
}

h1,
h2,
h3,
h4,
h5,
h6,
address {
   font-size: inherit;
   font-weight: 400;
   font-style: inherit;
}

// ПЕРЕМЕННЫЕ
$mw: 1095px;
$md1: $mw + 12;
$md2: 992.98;
$md3: 767.98;
$md4: 479.98;
// ПЕРЕМЕННЫЕ

// ВСТАВКА КАРТИНОК ФОНОМ
.ibg {
   background-position: center;
   background-size: cover;
   background-repeat: no-repeat;
}
.ibg>img{
   display: none;
}
// =========================

%flex-cen {
   display: flex;
   justify-content: center;
   align-items: center;
}

$maxWidth: 1920;
$maxWidthContainer: 1600px;


@mixin adaptive-value($property, $startSize, $minSize, $maxWidthContainerIndividual, $type) {
   $addSize: $startSize - $minSize;
   @if $type == 1{
      // Only smaller container
      #{$property}: $startSize + px;
      @media (max-width: #{$maxWidthContainerIndividual + px}){
         #{$property}: calc(#{$minSize + px} + #{$addSize}*((100vw - 320px) / #{$maxWidthContainerIndividual - 320}))
      }
   }
   @else if $type == 2{
       // Only bigger container
      #{$property}: $startSize + px;
      @media (min-width: #{$maxWidthContainerIndividual + px}){
         #{$property}: calc(#{$minSize + px} + #{$addSize}*((100vw - 320px) / #{$maxWidth - 320}))
      }
   }
   @else {
       //Always
      #{$property}: calc(#{$minSize + px} + #{$addSize}*((100vw - 320px) / #{$maxWidth - 320}))
   }
}

@mixin adaptive-value2($property, $minSize, $compensator){
   #{$property}: calc(#{$minSize + px} + (#{$compensator} + #{$compensator} * 0.7) * ((100vw - 320px) / #{$maxWidth}))
}

